// <auto-generated />
using System;
using DataAccessLayer.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20250627161346_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entites.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TicketClosed")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TicketLabelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserAssigned")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserRequestor")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TicketLabelId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("TicketBoards");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId", "Title")
                        .IsUnique()
                        .HasFilter("[BoardId] IS NOT NULL");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketTimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TimeLog");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.State", b =>
                {
                    b.HasOne("DataAccessLayer.Entites.TicketBoard", "Board")
                        .WithMany("States")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.Ticket", b =>
                {
                    b.HasOne("DataAccessLayer.Entites.State", "State")
                        .WithMany("Tickets")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entites.TicketLabel", "TicketLabel")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketLabelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("State");

                    b.Navigation("TicketLabel");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketLabel", b =>
                {
                    b.HasOne("DataAccessLayer.Entites.TicketBoard", "Board")
                        .WithMany("Labels")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Board");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketTimeLog", b =>
                {
                    b.HasOne("DataAccessLayer.Entites.Ticket", "Ticket")
                        .WithMany("TimeLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.State", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.Ticket", b =>
                {
                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketBoard", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("States");
                });

            modelBuilder.Entity("DataAccessLayer.Entites.TicketLabel", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
